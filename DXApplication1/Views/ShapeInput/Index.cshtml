@{
    ViewBag.Title = "ShapeInput";
}
<h2>Şekil Girdileri</h2>

@Html.AntiForgeryToken()

@Html.DevExpress().Button(settings =>
{
    settings.Name = "btnHesapla";
    settings.Text = "Hesapla";
    settings.UseSubmitBehavior = false;
    settings.ClientSideEvents.Click = "function(s,e){ hesaplaTiklandi(); }";
}).GetHtml()

<!-- 🌀 Yükleniyor Spinner -->
<div id="customSpinner">
    <img src="~/Images/spinner.gif" width="60" alt="Yükleniyor..." />
    <p>Hesaplama yapılıyor, lütfen bekleyin...</p>
</div>

<!-- ✅ Toast mesajları -->
<!-- Javascript ile dinamik olarak eklenecek -->
<!-- 💅 Stiller -->
<style>
    /* Spinner arkaplan */
    #customSpinner {
        display: none;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        z-index: 9999;
    }

    /* Toast stilleri */
    .toast {
        position: fixed;
        top: 20px;
        right: -300px;
        background: #4caf50;
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
        font-size: 15px;
        z-index: 10000;
        transition: right 0.5s ease;
    }

        .toast.error {
            background: #e74c3c;
        }

        .toast.show {
            right: 20px;
        }
</style>

<!-- ✅ Javascript -->
<script>
    function hesaplaTiklandi() {
        const spinner = document.getElementById('customSpinner');
        spinner.style.display = 'flex';
        const startTime = Date.now();

        var token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('/ShapeInput/Hesapla', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            body: '__RequestVerificationToken=' + encodeURIComponent(token)
        })
            .then(async resp => {
                const text = await resp.text();
                if (!resp.ok) throw new Error('HTTP ' + resp.status + ' - ' + text);
                try { return JSON.parse(text); } catch { return { ok: true, message: text }; }
            })
            .then(data => {
                const elapsed = Date.now() - startTime;
                const minDisplayTime = 1500;

                setTimeout(() => {
                    spinner.style.display = 'none';
                    if (!data.ok) {
                        showToast('⛔ ' + (data.message || 'İşlem başarısız'), true);
                        return;
                    }
                    showToast('✅ ' + (data.message || 'Hesaplama tamamlandı'));
                    setTimeout(() => location.reload(), 1500);
                    
                }, Math.max(0, minDisplayTime - elapsed));
            })
            .catch(err => {
                const elapsed = Date.now() - startTime;
                setTimeout(() => {
                    spinner.style.display = 'none';
                    console.error('Hata:', err);
                    showToast('⛔ Hata: ' + err.message, true);
                }, Math.max(0, 1500 - elapsed));
            });
    }

    function showToast(message, isError = false) {
        const toast = document.createElement('div');
        toast.className = 'toast' + (isError ? ' error' : '');
        toast.innerText = message;
        document.body.appendChild(toast);

        setTimeout(() => toast.classList.add('show'), 100);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 500);
        }, 3000);
    }
</script>

<!-- ✅ Grid'i çağır -->
@Html.Action("GridViewPartial")
